type Query {
    users(text: String): [User!]!
    content(text: String): [Content!]!
    events(text: String): [Event!]!
}

type Mutation {
    createContent(
        data: CreateContentInput!, 
        newEventData: CreateContentInput_event
        ): Content!
}

type Subscription {
    content: ContentPubSub
    events: EventPubSub
}

type ContentPubSub {
    mutation: MUTATION_TYPE!
    data: Content!
}

type EventPubSub {
    mutation: MUTATION_TYPE!
    data: Event!
}

input CreateContentInput {
    mediaType: String!
    media: String!
    title: String!
    description: String!
    postedFromEop: Boolean!
    postedBy: String!
    coordinates: String!
    event: String
}

input CreateContentInput_event {
    title: String
    startedAt: Float
    description: String
    country: String
    state: String
    city: String
    landmark: String
}

type User {
    id: ID!
    username: String!
    email: String!
    password: String!
    realname: String
    description: String
    profilePic: String
    content: [Content!]!
    events: [Event!]!
}

type Content {
    id: ID!
    mediaType: String!
    title: String!
    postedAt: Float!
    postedFromEop: Boolean!
    media: String!
    mediaPreview: String!
    description: String!
    postedBy: User!
    event: Event!
}

type Event {
    id: ID!
    title: String!
    startedAt: Float!
    coordinates: String!
    description: String
    country: String
    state: String
    city: String
    landmark: String
    content: [Content!]!
    attendees: [User!]!
}

enum MUTATION_TYPE {
    CREATED
    UPDATED
    DELETED
}